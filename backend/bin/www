#!/usr/bin/env node

'use strict';

const cluster = require('cluster');

if (cluster.isMaster) {
    const sqlite3 = require('sqlite3').verbose();
    const bcrypt = require('bcrypt');
    const uuidv4 = require('uuid/v4');
    const id = uuidv4();
    const database = require('../database.js');

    const db = new sqlite3.Database('database.sqlite3', err => {
        if (err) {
            console.error(err.message);
        }
    });
    new Promise((resolve, reject) => {
        db.serialize(() => {
            db.run('CREATE TABLE IF NOT EXISTS student (unique_key INTEGER NOT NULL PRIMARY KEY, voted INTEGER NOT NULL DEFAULT 0, grade INTEGER NOT NULL)');
            db.run('CREATE TABLE IF NOT EXISTS candidate1M (name TEXT NOT NULL PRIMARY KEY, votes INTEGER NOT NULL)');
            db.run('CREATE TABLE IF NOT EXISTS candidate1F (name TEXT NOT NULL PRIMARY KEY, votes INTEGER NOT NULL)');
            db.run('CREATE TABLE IF NOT EXISTS candidate2 (name TEXT NOT NULL PRIMARY KEY, votes INTEGER NOT NULL)');
            db.run('CREATE TABLE IF NOT EXISTS admin_password (password TEXT NOT NULL)');
            db.run('CREATE TABLE IF NOT EXISTS poll_name (name TEXT NOT NULL)');
            db.run('CREATE TABLE IF NOT EXISTS status (status TEXT NOT NULL)');
            db.run('INSERT INTO admin_password SELECT ( ? ) WHERE NOT EXISTS (SELECT * FROM admin_password)', [bcrypt.hashSync("hangaram", database.saltRounds)]);
            db.run('INSERT INTO poll_name SELECT ( \'한가람고등학교 학생회장단 선거\' ) WHERE NOT EXISTS (SELECT * FROM poll_name)');
            db.run('INSERT INTO status SELECT ( \'closed\' ) WHERE NOT EXISTS (SELECT * FROM status)', [], (err) => {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    })
        .then(() => Promise.all([database.getCandidates1M(), database.getCandidates1F(), database.getCandidates2()]))
        .then(results => {
            const candidateNames =  {
                candidateNames1M: results[0].map(candidate => candidate.name),
                candidateNames1F: results[1].map(candidate => candidate.name),
                candidateNames2: results[2].map(candidate => candidate.name),
                candidatesCacheId: id
            };

            const cpuCount = require('os').cpus().length;
            for (let i = 0; i < cpuCount; i++) {
                const worker = cluster.fork();
                worker.send(candidateNames);
            }

            cluster.on('exit', worker => {
                console.log(`Worker ${worker.id} died :(`);
                cluster.fork();
            });

            console.log(`HangaramChoiceBack running on port ${process.env.PORT || '3000'}`);
        });
    return;
}

const candidateNamesCache = require('../candidate_names_cache');

process.on('message', msg => {
    candidateNamesCache.setCache(msg);
});

/**
 * Module dependencies.
 */

const app = require('../app.js');
const debug = require('debug')('hangaramchoiceback:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
